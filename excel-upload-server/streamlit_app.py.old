#!/usr/bin/env python3
"""
SAMBIO HRR Data Uploader  
Excel 데이터 업로드 및 관리 애플리케이션
SambioHR5 스타일 적용

실행 방법:
cd excel-upload-server
./venv/bin/streamlit run streamlit_app.py --server.port 8501
"""

import streamlit as st
import pandas as pd
from pathlib import Path
import sys
import logging
from datetime import datetime
import tempfile
import os

# 현재 디렉토리를 Python 경로에 추가
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

from models.data_types import DATA_TYPES
from core.db_manager import DatabaseManager
from core.excel_loader import ExcelLoader
from handlers.data_transformers import get_transformer

# 로깅 설정
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Database path
DB_PATH = Path("/Users/hanskim/Projects/SambioHRR/sambio_human.db")

def init_session_state():
    """세션 상태 초기화"""
    if 'upload_files' not in st.session_state:
        st.session_state.upload_files = {}
        for data_type in DATA_TYPES.keys():
            st.session_state.upload_files[data_type] = []

def get_data_stats():
    """데이터베이스 통계 가져오기"""
    try:
        db_manager = DatabaseManager(str(DB_PATH))
        stats = []

        for data_type_id, data_type_info in DATA_TYPES.items():
            table_name = data_type_info.table_name

            # 테이블 존재 여부 확인
            if not db_manager.table_exists(table_name):
                stats.append({
                    "데이터 유형": data_type_info.label,
                    "등록 파일": "0개",
                    "Pickle 상태": "없음",
                    "데이터프레임": table_name,
                    "행 수": "-",
                    "최종 수정": "-"
                })
                continue

            # 행 수 가져오기
            row_count = db_manager.get_row_count(table_name)

            # 등록된 파일 정보
            uploaded_files = st.session_state.upload_files.get(data_type_id, [])
            file_info = f"{len(uploaded_files)}개" if uploaded_files else "0개"

            # 최종 수정일
            last_modified = datetime.now().strftime("%Y-%m-%d") if row_count > 0 else "-"

            stats.append({
                "데이터 유형": data_type_info.label,
                "등록 파일": file_info,
                "Pickle 상태": "있음" if row_count > 0 else "없음",
                "데이터프레임": table_name,
                "행 수": f"{row_count:,}" if row_count > 0 else "-",
                "최종 수정": last_modified
            })

        return pd.DataFrame(stats)

    except Exception as e:
        logger.error(f"데이터 통계 조회 실패: {e}")
        return pd.DataFrame()

def render_data_status_table():
    """데이터 상태 테이블 렌더링"""
    st.markdown("## 📊 데이터 업로드 관리")
    st.markdown("### 데이터 업로드 및 관리")

    df_status = get_data_stats()

    if not df_status.empty:
        row_height = 35
        header_height = 40
        total_height = len(df_status) * row_height + header_height + 20

        st.dataframe(
            df_status,
            use_container_width=True,
            hide_index=True,
            height=total_height
        )
    else:
        st.warning("데이터 상태를 불러올 수 없습니다.")

def render_file_upload_section():
    """파일 업로드 섹션 렌더링"""
    st.markdown("---")
    st.markdown("#### 📁 파일 등록")

    data_type_labels = {dt_id: dt_info.label for dt_id, dt_info in DATA_TYPES.items()}
    selected_label = st.selectbox(
        "데이터 유형 선택",
        options=list(data_type_labels.values()),
        key="data_type_selector"
    )

    selected_type = None
    for dt_id, label in data_type_labels.items():
        if label == selected_label:
            selected_type = dt_id
            break

    if selected_type:
        data_type_info = DATA_TYPES[selected_type]
        st.info(f"📊 {data_type_info.description}")

        uploaded_files = st.file_uploader(
            "Excel 파일 선택 (복수 선택 가능)",
            type=['xlsx', 'xls'],
            accept_multiple_files=True,
            key=f"file_uploader_{selected_type}"
        )

        if uploaded_files:
            if st.button("➕ 파일 추가", key="add_files"):
                for file in uploaded_files:
                    file_info = {
                        "name": file.name,
                        "size": file.size,
                        "file": file
                    }
                    existing_names = [f['name'] for f in st.session_state.upload_files[selected_type]]
                    if file_info['name'] not in existing_names:
                        st.session_state.upload_files[selected_type].append(file_info)
                st.success(f"{len(uploaded_files)}개 파일이 추가되었습니다.")
                st.rerun()

        if st.session_state.upload_files[selected_type]:
            st.markdown(f"##### 📋 {data_type_info.label} 등록 파일")

            for idx, file_info in enumerate(st.session_state.upload_files[selected_type]):
                col1, col2, col3 = st.columns([3, 1, 1])
                with col1:
                    st.text(file_info["name"])
                with col2:
                    st.text(f"{file_info['size'] / (1024*1024):.2f} MB")
                with col3:
                    if st.button("🗑️ 삭제", key=f"remove_{selected_type}_{idx}"):
                        st.session_state.upload_files[selected_type].pop(idx)
                        st.rerun()

def render_action_buttons():
    """액션 버튼 렌더링"""
    st.markdown("---")

    data_type_labels = {dt_id: dt_info.label for dt_id, dt_info in DATA_TYPES.items()}
    selected_label = st.selectbox(
        "로드할 데이터 유형",
        options=list(data_type_labels.values()),
        key="load_data_type_selector"
    )

    selected_type = None
    for dt_id, label in data_type_labels.items():
        if label == selected_label:
            selected_type = dt_id
            break

    col1, col2 = st.columns([1, 1])

    with col1:
        if st.button("📤 데이터 로드", type="primary", use_container_width=True):
            if selected_type:
                load_data(selected_type)
                st.rerun()

    with col2:
        if st.button("🔄 새로고침", use_container_width=True):
            st.rerun()

def load_data(selected_type):
    """데이터 로드 처리"""
    progress_bar = st.progress(0)
    status_text = st.empty()

    try:
        data_type_info = DATA_TYPES[selected_type]
        files = st.session_state.upload_files[selected_type]

        if not files:
            st.warning("등록된 파일이 없습니다.")
            return

        status_text.text(f"📊 {data_type_info.label} 로딩 중...")
        progress_bar.progress(0.1)

        excel_loader = ExcelLoader()
        db_manager = DatabaseManager(str(DB_PATH))

        all_dfs = []
        temp_files_to_delete = []

        total_files = len(files)
        for idx, file_info in enumerate(files):
            status_text.text(f"📖 파일 로딩 중: {file_info['name']} ({idx+1}/{total_files})")
            progress = 0.1 + (idx / total_files) * 0.4
            progress_bar.progress(progress)

            with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp_file:
                tmp_file.write(file_info['file'].getbuffer())
                tmp_path = tmp_file.name

            try:
                df = excel_loader.load_excel(tmp_path)
                if df is not None and not df.empty:
                    all_dfs.append(df)
                temp_files_to_delete.append(tmp_path)
            except Exception as e:
                if os.path.exists(tmp_path):
                    os.unlink(tmp_path)
                raise e

        if all_dfs:
            status_text.text("🔄 데이터 병합 중...")
            progress_bar.progress(0.6)

            combined_df = pd.concat(all_dfs, ignore_index=True)
            logger.info(f"데이터 병합 완료: {len(combined_df):,}행")

            transformer = get_transformer(selected_type)
            if transformer:
                status_text.text("🔄 데이터 변환 중...")
                progress_bar.progress(0.7)
                combined_df = transformer(combined_df)

            status_text.text("💾 데이터베이스 저장 중...")
            progress_bar.progress(0.8)

            db_manager.insert_dataframe(data_type_info.table_name, combined_df)

            progress_bar.progress(1.0)
            status_text.text("✅ 로드 완료!")

            st.session_state.upload_files[selected_type] = []

            for tmp_path in temp_files_to_delete:
                try:
                    if os.path.exists(tmp_path):
                        os.unlink(tmp_path)
                except Exception as del_error:
                    logger.warning(f"임시 파일 삭제 실패: {tmp_path} - {del_error}")

            st.success(f"🎉 {data_type_info.label} 업로드 완료! ({len(combined_df):,}행)")

        else:
            st.warning("로드된 데이터가 없습니다.")

    except Exception as e:
        st.error(f"❌ 로드 실패: {e}")
        logger.error(f"데이터 로드 오류: {e}")
    finally:
        progress_bar.empty()
        status_text.empty()

def render_action_buttons():
    """액션 버튼 렌더링"""
    st.markdown("---")

    data_type_labels = {dt_id: dt_info.label for dt_id, dt_info in DATA_TYPES.items()}
    selected_label = st.selectbox(
        "로드할 데이터 유형",
        options=list(data_type_labels.values()),
        key="load_data_type_selector"
    )

    selected_type = None
    for dt_id, label in data_type_labels.items():
        if label == selected_label:
            selected_type = dt_id
            break

    col1, col2 = st.columns([1, 1])

    with col1:
        if st.button("📤 데이터 로드", type="primary", use_container_width=True):
            if selected_type:
                load_data(selected_type)
                st.rerun()

    with col2:
        if st.button("🔄 새로고침", use_container_width=True):
            st.rerun()

def main():
    """메인 애플리케이션"""
    st.set_page_config(
        page_title="SAMBIO HRR Data Uploader",
        page_icon="📊",
        layout="wide",
        initial_sidebar_state="collapsed"
    )

    init_session_state()

    with st.sidebar:
        st.markdown("## 📊 SAMBIO HRR Data Uploader")
        st.markdown("---")
        st.markdown("### 🎯 주요 기능")
        st.markdown("""
        - **Excel 파일 업로드**: 대용량 데이터 처리
        - **자동 병합**: 여러 시트 자동 통합
        - **DB 저장**: SQLite 데이터베이스 관리
        - **데이터 조회**: 실시간 데이터 확인
        """)

        st.markdown("---")
        st.markdown("### ℹ️ 사용법")
        st.markdown("""
        1. **파일 등록**: Excel 파일 선택 및 추가
        2. **데이터 로드**: 버튼 클릭으로 처리 시작
        3. **상태 확인**: 실시간 진행률 모니터링
        4. **새로고침**: 테이블 업데이트
        """)

        st.markdown("---")
        if DB_PATH.exists():
            st.success(f"✅ DB 연결됨")
            st.caption(f"📁 {DB_PATH.name}")
        else:
            st.warning("⚠️ DB 파일 없음")

    try:
        render_data_status_table()
        render_file_upload_section()
        render_action_buttons()

    except Exception as e:
        st.error(f"❌ 애플리케이션 오류: {e}")
        logger.error(f"애플리케이션 오류: {e}", exc_info=True)

if __name__ == "__main__":
    main()
