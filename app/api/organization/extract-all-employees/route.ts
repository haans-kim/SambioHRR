import { NextRequest, NextResponse } from 'next/server'
import DatabaseManager from '@/lib/database/connection'

interface ClaimRecord {
  employeeId: string;
  workDate: string;
  claimedHours: number;
}

interface EmployeeNameRecord {
  employeeId: string;
  employeeName: string;
}

/**
 * Ï†ÑÏ≤¥ Claim Îç∞Ïù¥ÌÑ∞ÏóêÏÑú Î™®Îì† ÏßÅÏõê Ï†ïÎ≥¥ Ï∂îÏ∂ú
 * Ground Rules Ï†ÑÏ≤¥ Î∂ÑÏÑùÏö©
 */
export async function POST(request: NextRequest) {
  try {
    const humanDb = DatabaseManager.getInstance().getDb()

    console.log('üîç Extracting ALL employees from Claim data...')

    // Claim Îç∞Ïù¥ÌÑ∞ÏóêÏÑú Í∑ºÎ¨¥ÏãúÍ∞ÑÏù¥ 0Ïù¥ ÏïÑÎãå Î™®Îì† Î†àÏΩîÎìú Ï∂îÏ∂ú (ÏßÅÏõê+ÎÇ†Ïßú Ï°∞Ìï©)
    const stmt = humanDb.prepare(`
      SELECT
        ÏÇ¨Î≤à as employeeId,
        DATE(Í∑ºÎ¨¥Ïùº) as workDate,
        Ïã§Ï†úÍ∑ºÎ¨¥ÏãúÍ∞Ñ as claimedHours
      FROM claim_data
      WHERE Ïã§Ï†úÍ∑ºÎ¨¥ÏãúÍ∞Ñ > 0
      ORDER BY ÏÇ¨Î≤à, Í∑ºÎ¨¥Ïùº
    `)

    const allRecords = stmt.all() as ClaimRecord[]
    console.log(`‚úÖ Found ${allRecords.length} records with actual work hours > 0`)
    
    // ÏßÅÏõêÎ≥ÑÎ°ú Í∑∏Î£πÌôîÌïòÏó¨ Î∂ÑÏÑùÏö© ÌòïÌÉúÎ°ú Î≥ÄÌôò
    const employeeMap = new Map()
    
    allRecords.forEach(record => {
      if (!employeeMap.has(record.employeeId)) {
        employeeMap.set(record.employeeId, {
          employeeId: record.employeeId,
          employeeName: `ÏßÅÏõê${record.employeeId}`, // Í∏∞Î≥∏Í∞í
          dates: []
        })
      }
      employeeMap.get(record.employeeId).dates.push(record.workDate)
    })
    
    const employees = Array.from(employeeMap.values())
    console.log(`‚úÖ Grouped into ${employees.length} employees`)
    
    // ÏßÅÏõêÎ™Ö Îß§Ìïë - organization_dataÏóêÏÑú Ïã§Ï†ú Ïù¥Î¶Ñ Í∞ÄÏ†∏Ïò§Í∏∞
    if (employees.length > 0) {
      const employeeIds = employees.map(emp => emp.employeeId)
      const placeholders = employeeIds.map(() => '?').join(',')
      
      const nameStmt = humanDb.prepare(`
        SELECT
          ÏÇ¨Î≤à as employeeId,
          ÏÑ±Î™Ö as employeeName
        FROM organization_data
        WHERE ÏÇ¨Î≤à IN (${placeholders})
      `)

      const nameData = nameStmt.all(...employeeIds) as EmployeeNameRecord[]
      const nameMap = new Map(nameData.map(item => [item.employeeId, item.employeeName]))
      
      // Ïù¥Î¶Ñ ÏóÖÎç∞Ïù¥Ìä∏
      employees.forEach(emp => {
        emp.employeeName = nameMap.get(emp.employeeId) || `ÏßÅÏõê${emp.employeeId}`
      })
      
      console.log(`‚úÖ Updated names for ${nameData.length} employees`)
    }

    return NextResponse.json({
      success: true,
      employees,
      summary: {
        totalEmployees: employees.length,
        totalRecords: allRecords.length,
        dataSource: 'claim_data (Ïã§Ï†úÍ∑ºÎ¨¥ÏãúÍ∞Ñ > 0)',
        extractionTime: new Date().toISOString()
      }
    })
    
  } catch (error) {
    console.error('‚ùå Extract all employees error:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: 'Failed to extract all employees',
        details: error instanceof Error ? error.message : 'Unknown error'
      }, 
      { status: 500 }
    )
  }
}