import { NextResponse } from 'next/server'
import { db } from '@/lib/database/connection'

export async function POST(request: Request) {
  try {
    const body = await request.json()
    const { startDate, endDate } = body
    
    console.log('üîç Extract employees with work hours request:', { startDate, endDate })
    
    if (!startDate || !endDate) {
      return NextResponse.json(
        { error: 'startDate and endDate are required' },
        { status: 400 }
      )
    }
    
    // Ìï¥Îãπ Í∏∞Í∞ÑÏóê Í∑ºÎ¨¥ÏãúÍ∞ÑÏù¥ 0Î≥¥Îã§ ÌÅ∞ Î™®Îì† ÏßÅÏõêÎì§ Ï∂îÏ∂ú
    // Í∑ºÎ¨¥Ïùº Ïª¨ÎüºÏùÄ Ï†ïÏàò(YYYYMMDD) ÎòêÎäî ÌÖçÏä§Ìä∏('YYYY-MM-DD') ÌòïÏãù
    // Í∑ºÎ¨¥ÏãúÍ∞ÑÏùÄ ExcelÏóêÏÑú "HH:MM" ÌòïÏãùÏúºÎ°ú ÏóÖÎ°úÎìúÎêòÏñ¥ decimal hoursÎ°ú Î≥ÄÌôòÎê®
    const query = `
      SELECT DISTINCT
        c.ÏÇ¨Î≤à as employeeId,
        c.ÏÑ±Î™Ö as employeeName,
        o.ÏÑºÌÑ∞ as center,
        o.ÌåÄ as team,
        o.Í∑∏Î£π as groupName,
        o.ÏßÅÍ∏âÎ™Ö as position
      FROM claim_data c
      LEFT JOIN organization_data o ON c.ÏÇ¨Î≤à = o.ÏÇ¨Î≤à
      WHERE CAST(
              CASE
                WHEN typeof(c.Í∑ºÎ¨¥Ïùº) = 'integer' THEN c.Í∑ºÎ¨¥Ïùº
                WHEN typeof(c.Í∑ºÎ¨¥Ïùº) = 'text' THEN CAST(substr(replace(c.Í∑ºÎ¨¥Ïùº, '-', ''), 1, 8) AS INTEGER)
              END AS INTEGER
            ) >= CAST(replace(?, '-', '') AS INTEGER)
        AND CAST(
              CASE
                WHEN typeof(c.Í∑ºÎ¨¥Ïùº) = 'integer' THEN c.Í∑ºÎ¨¥Ïùº
                WHEN typeof(c.Í∑ºÎ¨¥Ïùº) = 'text' THEN CAST(substr(replace(c.Í∑ºÎ¨¥Ïùº, '-', ''), 1, 8) AS INTEGER)
              END AS INTEGER
            ) <= CAST(replace(?, '-', '') AS INTEGER)
        AND c.ÏÇ¨Î≤à IS NOT NULL
      ORDER BY c.ÏÇ¨Î≤à
    `
    
    const stmt = db.getDb().prepare(query)
    const employees = stmt.all(startDate, endDate)
    
    console.log(`üìä Period: ${startDate} ~ ${endDate}`)
    console.log(`üë• Employees with work hours > 0: ${employees.length}`)
    console.log(`üéØ Sample employees:`, employees.slice(0, 3).map(e => `${e.employeeName}(${e.employeeId})`))
    
    return NextResponse.json({
      employees,
      count: employees.length,
      period: { startDate, endDate },
      criteria: 'work_hours > 0'
    })
  } catch (error) {
    console.error('‚ùå Error extracting employees with work hours:', error)
    return NextResponse.json(
      { 
        error: 'Failed to extract employees with work hours',
        details: error instanceof Error ? error.message : 'Unknown error' 
      },
      { status: 500 }
    )
  }
}